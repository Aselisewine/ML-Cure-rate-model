
# A1. R code for data generation with two covariates

mydata = function(n,alpha,beta1,beta2,cens,setting){ 
  
  z1 = rnorm(n,mean=0,sd=1) # z1 and z2 are the two continuous covariates generated independently from standard normal distributions
  z2 = rnorm(n,mean=0,sd=1)
  
  
  piz = rep(NA,n) # this is the uncured probability pi(z)
  
  
  if(setting==1){ # linear classification boundary
    piz = (exp(0.3-(5*z1)-(3*z2))/(1+exp(0.3-(5*z1)-(3*z2))))
  }
  
  if(setting==2){ # non-linear classification boundary 
    piz =  (exp(0.3-(10*z1*z2)-(5*z1*z2))/(1+exp(0.3-(10*z1*z2)-(5*z1*z2))))
  }
  
  C = runif(n,0,cens) # censoring time 
  U = runif(n,0,1)
  Y = rep(NA,n) # observed lifetime
  D = rep(NA,n) # censoring indicator
  J = rep(NA,n) # cured indicator (J=0 implies cured)
  Sp = rep(NA,n) # overall (population) survival function
  S1 = rep(NA,n) # susceptible survival function
  S0 = rep(NA,n) # baseline survival function
  
  for(i in 1:n){
    if(U[i]<= 1-piz[i]){
      Y[i] = C[i]
      D[i] = 0
      J[i] = 0
      Sp[i] = (1-piz[i]) + (piz[i]*exp(-((Y[i]/exp(-((beta1*z1[i])+(beta2*z2[i]))/alpha))^alpha)))
      S1[i] = exp(-((Y[i]/exp(-((beta1*z1[i])+(beta2*z2[i]))/alpha))^alpha))
      S0[i] = exp(-((Y[i])^alpha))
    }else{
      T =  rweibull(1,shape=alpha,scale= exp(-((beta1*z1[i])+(beta2*z2[i]))/alpha) )
      Y[i] = min(T,C[i])
      J[i] = 1
      Sp[i] = (1-piz[i]) + (piz[i]*exp(-((Y[i]/exp(-((beta1*z1[i])+(beta2*z2[i]))/alpha))^alpha)))
      S1[i] = exp(-((Y[i]/exp(-((beta1*z1[i])+(beta2*z2[i]))/alpha))^alpha))
      S0[i] = exp(-((Y[i])^alpha))
      if(Y[i]==C[i]){
        D[i] = 0
      }else{
        D[i] = 1
      }
    }
  }
  return(data.frame(Y,D,z1,z2,J,uncure=piz,Sp=Sp,S1=S1,S0=S0))
} # function to generate data under 2 different classification boundaries


# A2. R code for data generation with ten correlated covariates

library(MASS)

mydata = function(n,alpha,beta1,beta2,beta3,beta4,beta5,beta6,beta7,beta8,beta9,beta10,cens,setting){ 
  
  c<-10
  SigmaMat=matrix(1:5*c, nrow=c,ncol=c) #variance-covariance matrix 
  for(i in 1:nrow(SigmaMat)){
    for(j in 1:ncol(SigmaMat)){
      if (i==j){
        SigmaMat[i,j]<-1} else {
          SigmaMat[i,j]<-0.8^abs(i-j)}
    }
  }
  
  muV=matrix(1:5*c, nrow=1,ncol=c)
  for (j in 1:ncol(muV)) {
    muV[,j]<-0
  }
  
  z <- mvrnorm(n,mu = muV,
               Sigma = SigmaMat)
  colnames(z) <- c('z1', 'z2', 'z3', 'z4', 'z5','z6','z7','z8','z9','z10')
  
  piz = rep(NA,n) # this is the uncured probability pi(z)
  
  if(setting==3){ # complex classification boundary with high dimension
    piz = exp(-exp(-0.8*z[,1]*z[,2]+1.1*z[,2]*z[,4]+0.5*z[,3]+0.2*z[,7]*z[,7]-1.3*sin(z[,5]*z[,6])+1.9*cos(z[,7]*z[,8])-1.5*exp(z[,5]*z[,6]*z[,7])-1.6*z[,7]*z[,8]*z[,9]*z[,10]+0.8*(z[,6]*z[,7])*(z[,8]*z[,9]*z[,8]*z[,9])+1.8*cos(z[,5]*z[,6]*z[,7]*z[,8]*z[,9])+1.2*(abs(z[,6]*z[,7]*z[,8]*z[,9]*z[,10])^0.5)-1.2))
  }
  
  C = runif(n,0,cens) # censoring time 
  U = runif(n,0,1)
  Y = rep(NA,n) # observed lifetime
  D = rep(NA,n) # censoring indicator
  J = rep(NA,n) # cured indicator (J=0 implies cured)
  Sp = rep(NA,n) # overall (population) survival function
  S1 = rep(NA,n) # susceptible survival function
  
  for(i in 1:n){
    if(U[i]<= 1-piz[i]){
      Y[i] = C[i]
      D[i] = 0
      J[i] = 0
      
      S1[i] = exp(-((Y[i]/exp(-((beta1*z[,1][i])+(beta2*z[,2][i])+(beta3*z[,3][i])+(beta4*z[,4][i])+(beta5*z[,5][i])+(beta6*z[,6][i])+(beta7*z[,7][i])+(beta8*z[,8][i])+(beta9*z[,9][i])+(beta10*z[,10][i]))/alpha))^alpha))
      Sp[i] = (1-piz[i]) + (piz[i]*exp(-((Y[i]/exp(-((beta1*z[,1][i])+(beta2*z[,2][i])+(beta3*z[,3][i])+(beta4*z[,4][i])+(beta5*z[,5][i])+(beta6*z[,6][i])+(beta7*z[,7][i])+(beta8*z[,8][i])+(beta9*z[,9][i])+(beta10*z[,10][i]))/alpha))^alpha)))
      
    }else{
      T1 =  rweibull(1,shape=alpha,scale= exp(-((beta1*z[,1][i])+(beta2*z[,2][i])+(beta3*z[,3][i])+(beta4*z[,4][i])+(beta5*z[,5][i])+(beta6*z[,6][i])+(beta7*z[,7][i])+(beta8*z[,8][i])+(beta9*z[,9][i])+(beta10*z[,10][i]))/alpha))
      
      Y[i] = min(T1,C[i])
      J[i] = 1
      
      S1[i] = exp(-((Y[i]/exp(-((beta1*z[,1][i])+(beta2*z[,2][i])+(beta3*z[,3][i])+(beta4*z[,4][i])+(beta5*z[,5][i])+(beta6*z[,6][i])+(beta7*z[,7][i])+(beta8*z[,8][i])+(beta9*z[,9][i])+(beta10*z[,10][i]))/alpha))^alpha))
      Sp[i] = (1-piz[i]) + (piz[i]*exp(-((Y[i]/exp(-((beta1*z[,1][i])+(beta2*z[,2][i])+(beta3*z[,3][i])+(beta4*z[,4][i])+(beta5*z[,5][i])+(beta6*z[,6][i])+(beta7*z[,7][i])+(beta8*z[,8][i])+(beta9*z[,9][i])+(beta10*z[,10][i]))/alpha))^alpha)))
      
      if(Y[i]==C[i]){
        D[i] = 0
      }else{
        D[i] = 1
      }
    }
  }
  return(data.frame(Y,D,z,J,uncure=piz,Sp=Sp,S1=S1))
} 

A3. R code for data generation with ten covariates

library(Rlab)
mydata = function(n,alpha,beta1,beta2,beta3,beta4,beta5,beta6,beta7,beta8,beta9,beta10,cens,setting){ 
  
  z1 =rbern(n,prob = 0.5)
  z2 = rbern(n,prob = 0.3)
  z3 =rbern(n,prob = 0.5)
  z4 =rbern(n,prob = 0.7)
  z5 = rnorm(n,mean=0,sd=1) 
  z6 = rnorm(n,mean=0,sd=1)
  z7 = rnorm(n,mean=0,sd=1)
  z8 = rnorm(n,mean=0,sd=1)
  z9 = rnorm(n,mean=0,sd=1)
  z10 = rnorm(n,mean=0,sd=1)  
  
  piz = rep(NA,n) # this is the uncured probability pi(z)
  
  if(setting==4){ # complex classification boundary with high dimension
    piz = exp(-exp(-0.8*z1*z2+1.1*z2*z4+0.5*z3+0.2*z7*z7-1.3*sin(z5*z6)+1.9*cos(z7*z8)-1.5*exp(z5*z6*z7)-1.6*z7*z8*z9*z10+0.8*(z6*z7)*(z8*z9*z8*z9)+1.8*cos(z5*z6*z7*z8*z9)+1.2*(abs(z6*z7*z8*z9*z10)^0.5)-2.4))
  }
  
  C = runif(n,0,cens) # censoring time 
  U = runif(n,0,1)
  Y = rep(NA,n) # observed lifetime
  D = rep(NA,n) # censoring indicator
  J = rep(NA,n) # cured indicator (J=0 implies cured)
  Sp = rep(NA,n) # overall (population) survival function
  S1 = rep(NA,n) # susceptible survival function
  
  for(i in 1:n){
    if(U[i]<= 1-piz[i]){
      Y[i] = C[i]
      D[i] = 0
      J[i] = 0
            
      S1[i] = exp(-((Y[i]/exp(-((beta1*z1[i])+(beta2*z2[i])+(beta3*z3[i])+(beta4*z4[i])+(beta5*z5[i])+(beta6*z6[i])+(beta7*z7[i])+(beta8*z8[i])+(beta9*z9[i])+(beta10*z10[i]))/alpha))^alpha))
      Sp[i] = (1-piz[i]) + (piz[i]*exp(-((Y[i]/exp(-((beta1*z1[i])+(beta2*z2[i])+(beta3*z3[i])+(beta4*z4[i])+(beta5*z5[i])+(beta6*z6[i])+(beta7*z7[i])+(beta8*z8[i])+(beta9*z9[i])+(beta10*z10[i]))/alpha))^alpha)))
      
    }else{
      T1 =  rweibull(1,shape=alpha,scale= exp(-((beta1*z1[i])+(beta2*z2[i])+(beta3*z3[i])+(beta4*z4[i])+(beta5*z5[i])+(beta6*z6[i])+(beta7*z7[i])+(beta8*z8[i])+(beta9*z9[i])+(beta10*z10[i]))/alpha) )
      Y[i] = min(T1,C[i])
      J[i] = 1
      
      S1[i] = exp(-((Y[i]/exp(-((beta1*z1[i])+(beta2*z2[i])+(beta3*z3[i])+(beta4*z4[i])+(beta5*z5[i])+(beta6*z6[i])+(beta7*z7[i])+(beta8*z8[i])+(beta9*z9[i])+(beta10*z10[i]))/alpha))^alpha))
      Sp[i] = (1-piz[i]) + (piz[i]*exp(-((Y[i]/exp(-((beta1*z1[i])+(beta2*z2[i])+(beta3*z3[i])+(beta4*z4[i])+(beta5*z5[i])+(beta6*z6[i])+(beta7*z7[i])+(beta8*z8[i])+(beta9*z9[i])+(beta10*z10[i]))/alpha))^alpha)))
      
      if(Y[i]==C[i]){
        D[i] = 0
      }else{
        D[i] = 1
      }
    }
  }
  return(data.frame(Y,D,z1,z2,z3,z4,z5,z6,z7,z8,z9,z10,J,uncure=piz,Sp=Sp,S1=S1))
} 


# A4. R code for SVM-based EM algorithm



library(survival)

smsurv <-function(Time,Status,X,beta,w,model){    
  death_point <- sort(unique(subset(Time, Status==1)))
  if(model=='ph') coxexp <- exp((beta)%*%t(X[,-1]))  
  lambda <- numeric()
  event <- numeric()
  for(i in 1: length(death_point)){
    event[i] <- sum(Status*as.numeric(Time==death_point[i]))
    if(model=='ph')  
      temp <- sum(as.numeric(Time>=death_point[i])*w*drop(coxexp))
    if(model=='aft')  
      temp <- sum(as.numeric(Time>=death_point[i])*w)
    temp1 <- event[i]
    lambda[i] <- temp1/temp
  }
  HHazard <- numeric()
  for(i in 1:length(Time)){
    HHazard[i] <- sum(as.numeric(Time[i]>=death_point)*lambda)
    if(Time[i]>max(death_point))
      HHazard[i] <- Inf
    if(Time[i]<min(death_point))
      HHazard[i] <- 0
  }
  survival <- exp(-HHazard)
  list(survival=survival)
}



## SVM-based EM
library(e1071)
em.svm <- function(Time,Time1,Status,Status1,X,X1,Z,Z1,offsetvar,uncureprob,uncurepred,beta,model,emmax,eps,data,testdata){     
  w <- Status	
  w1 <- Status1
  n <- length(Status)
  m <- length(Status1)
  
  s <- smsurv(Time,Status,X,beta,w,model="ph")$survival #The estimated baseline survival function based on the Breslow method, 
  #which is used in order to update the E-step in the EM algorithm
  #Time:this is the follow up time for "ph" model. If model is "aft", then this is residual 
  #Status:censoring indicator,X: effects of covariates of uncured patients
  #beta: initial beta from coxph, 
  #w:conditional probability of the ith individual remains uncured at the mth iteration. We use Status as initial value
  #model:specifies your model, it can be "ph" or "aft"
  	
  convergence<- 1000;
  i <-1
  while (convergence > eps & i < emmax){  
      survival<-drop(s^(exp((beta)%*%t(X[,-1]))))
  
    ## E step 
    w <- Status+(1-Status)*(uncureprob*survival)/((1-uncureprob)+uncureprob*survival)

    ## M step
    multipleuncureprob=matrix(1:5*n, nrow=n,ncol=5)
    for (j in 1:n){
      multipleuncureprob[j,]<-rbinom(5,size = 1,prob=w[j])
    }
    uncureprob1<-c(1,1)
    uncureprob2<-c(1,1)
    uncureprob3<-c(1,1)
    uncureprob4<-c(1,1)
    uncureprob5<-c(1,1)
    for (j in 1:n){uncureprob1[j]=multipleuncureprob[j,1]}
    for (j in 1:n){uncureprob2[j]=multipleuncureprob[j,2]}
    for (j in 1:n){uncureprob3[j]=multipleuncureprob[j,3]}
    for (j in 1:n){uncureprob4[j]=multipleuncureprob[j,4]}
    for (j in 1:n){uncureprob5[j]=multipleuncureprob[j,5]}
    
    for (j in 1:n){uncureprob1[j]=uncureprob1[j]*2-1}
    for (j in 1:n){uncureprob2[j]=uncureprob2[j]*2-1}
    for (j in 1:n){uncureprob3[j]=uncureprob3[j]*2-1}
    for (j in 1:n){uncureprob4[j]=uncureprob4[j]*2-1}
    for (j in 1:n){uncureprob5[j]=uncureprob5[j]*2-1}
    
    uncureprob1<-as.factor(uncureprob1)
    uncureprob2<-as.factor(uncureprob2)
    uncureprob3<-as.factor(uncureprob3)
    uncureprob4<-as.factor(uncureprob4)
    uncureprob5<-as.factor(uncureprob5)
    update_cureb<-c(1,1)
    update_pred<-c(1,1)
    
    obj<-tune(svm,uncureprob1~Z[,-1],data=data, ranges=list(gamma=2^(-1:1),cost=2^(2:4)),tunecontrol=tune.control(sampling = "fix"))
    bg<-obj$best.parameters[1]  
    bc<-obj$best.parameters[2]
    mod1<-svm(Z[,-1],uncureprob1,gamma=bg[[1]],cost=bc[[1]], probability=TRUE)
    pred1<-predict(mod1,Z[,-1],probability = TRUE)
    cpred1<-predict(mod1,Z1[,-1],probability = TRUE)
    proba1<-attr(pred1, "probabilities")
    cproba1<-attr(cpred1, "probabilities")
    update_cureb1<-c(1,1)
    update_pred1<-c(1,1)
    for (z in 1:n){update_cureb1[z]<-proba1[z,2]}
    for (k in 1:m){update_pred1[k]<-cproba1[k,2]}
    uncureprob1<-as.numeric(as.character(uncureprob1))
    
    mod2<-svm(Z[,-1],uncureprob2,gamma=bg[[1]],cost=bc[[1]],probability=TRUE)
    pred2<-predict(mod2,Z[,-1],probability = TRUE)
    cpred2<-predict(mod2,Z1[,-1],probability = TRUE)
    proba2<-attr(pred2, "probabilities")
    cproba2<-attr(cpred2, "probabilities")
    update_cureb2<-c(1,1)
    update_pred2<-c(1,1)
    for (z in 1:n){update_cureb2[z]<-proba2[z,2]}
    for (k in 1:m){update_pred2[k]<-cproba2[k,2]}
    uncureprob2<-as.numeric(as.character(uncureprob2))
    
    mod3<-svm(Z[,-1],uncureprob3,gamma=bg[[1]],cost=bc[[1]],probability=TRUE)
    pred3<-predict(mod3,Z[,-1],probability = TRUE)
    cpred3<-predict(mod3,Z1[,-1],probability = TRUE)
    proba3<-attr(pred3, "probabilities")
    cproba3<-attr(cpred3, "probabilities")
    update_cureb3<-c(1,1)
    update_pred3<-c(1,1)
    for (z in 1:n){update_cureb3[z]<-proba3[z,2]}
    for (k in 1:m){update_pred3[k]<-cproba3[k,2]}
    uncureprob3<-as.numeric(as.character(uncureprob3))
    
    mod4<-svm(Z[,-1],uncureprob4,gamma=bg[[1]],cost=bc[[1]],probability=TRUE)
    pred4<-predict(mod4,Z[,-1],probability = TRUE)
    cpred4<-predict(mod4,Z1[,-1],probability = TRUE)
    proba4<-attr(pred4, "probabilities")
    cproba4<-attr(cpred4, "probabilities")
    update_cureb4<-c(1,1)
    update_pred4<-c(1,1)
    for (z in 1:n){update_cureb4[z]<-proba4[z,2]}
    for (k in 1:m){update_pred4[k]<-cproba4[k,2]}
    uncureprob4<-as.numeric(as.character(uncureprob4))
    
    mod5<-svm(Z[,-1],uncureprob5,gamma=bg[[1]],cost=bc[[1]],probability=TRUE)
    pred5<-predict(mod5,Z[,-1],probability = TRUE)
    cpred5<-predict(mod5,Z1[,-1],probability = TRUE)
    proba5<-attr(pred5, "probabilities")
    cproba5<-attr(cpred5, "probabilities")
    update_cureb5<-c(1,1)
    update_pred5<-c(1,1)
    for (z in 1:n){update_cureb5[z]<-proba5[z,2]}
    for (k in 1:m){update_pred5[k]<-cproba5[k,2]}
    uncureprob5<-as.numeric(as.character(uncureprob5))
    
    for (z in 1:n){update_cureb[z]<-(update_cureb1[z]+update_cureb2[z]+update_cureb3[z]+update_cureb4[z]+update_cureb5[z])/5}
    for (k in 1:m){update_pred[k]<-(update_pred1[k]+update_pred2[k]+update_pred3[k]+update_pred4[k]+update_pred5[k])/5}
    
    
    if(!is.null(offsetvar)) 
      update_cureb <- as.numeric(eval(parse(text = paste("glm", "(", "w~Z[,-1]+offset(offsetvar)",",family = quasibinomial(link='", link, "'",")",")",sep = "")))$coef)
   
      update_beta <- coxph(Surv(Time, Status)~X[,-1]+offset(log(w)),subset=w!=0, method="breslow")$coef
      if(!is.null(offsetvar)) 
        update_beta <- coxph(Surv(Time, Status)~X[,-1]+offset(offsetvar+log(w)), subset=w!=0, method="breslow")$coef
      update_s <-smsurv(Time,Status,X,beta,w,model="ph")$survival
    update_s1 <-smsurv(Time1,Status1,X1,beta,w1,model="ph")$survival
  
    convergence<-sum(c(mean(update_cureb)-mean(uncureprob),update_beta-beta)^2)
    
    uncureprob <- update_cureb
    uncurepred <- update_pred
    beta <- update_beta 
    s<-update_s
    s1<-update_s1
    
    i <- i+1
    #print(i)
  }
    S1 = drop(s^(exp((beta)%*%t(X[,-1])))) # survival function of susceptible group
    S1.pred<-drop(s1^(exp((beta)%*%t(X1[,-1]))))

  Sp = (1-uncureprob)+(uncureprob*S1)
  em.svm <- list(latencyfit=beta,Uncureprob=uncureprob,Uncurepred=uncurepred,S0=s,S1=S1,S1.pred=S1.pred,Sp=Sp,tau=convergence, Mod1=mod1, Mod2=mod2, Mod3=mod3, Mod4=mod4, Mod5=mod5)
}


## N-Net
library(neuralnet)

em.nn <-function(Time,Time1,Status,Status1,X,X1,Z,Z1,offsetvar,uncureprob,uncurepred,beta,model,emmax,eps,data,testdata) # considering proportional hazards structure
{     
  w <- Status
  w1<-Status1
  n <- length(Status)
  m <- length(Status1)
  
  s <- smsurv(Time,Status,X,beta,w,model="ph")$survival
  
  convergence<- 1000;i <-1
  while (convergence > eps & i < emmax){ 

      survival<-drop(s^(exp((beta)%*%t(X[,-1]))))
    
    ## E step 
    w <- Status+(1-Status)*(uncureprob*survival)/((1-uncureprob)+uncureprob*survival)
    ## M step
    multipleuncureprob=matrix(1:5*n, nrow=n,ncol=5)
    for (j in 1:n){multipleuncureprob[j,]<-rbinom(5,size = 1,prob=w[j])}
    uncureprob1<-c(1,1)
    uncureprob2<-c(1,1)
    uncureprob3<-c(1,1)
    uncureprob4<-c(1,1)
    uncureprob5<-c(1,1)
    for (j in 1:n){uncureprob1[j]=multipleuncureprob[j,1]}
    for (j in 1:n){uncureprob2[j]=multipleuncureprob[j,2]}
    for (j in 1:n){uncureprob3[j]=multipleuncureprob[j,3]}
    for (j in 1:n){uncureprob4[j]=multipleuncureprob[j,4]}
    for (j in 1:n){uncureprob5[j]=multipleuncureprob[j,5]}
    for (j in 1:n){uncureprob1[j]=uncureprob1[j]}
    for (j in 1:n){uncureprob2[j]=uncureprob2[j]}
    for (j in 1:n){uncureprob3[j]=uncureprob3[j]}
    for (j in 1:n){uncureprob4[j]=uncureprob4[j]}
    for (j in 1:n){uncureprob5[j]=uncureprob5[j]}
    uncureprob1<-as.factor(uncureprob1)
    uncureprob2<-as.factor(uncureprob2)
    uncureprob3<-as.factor(uncureprob3)
    uncureprob4<-as.factor(uncureprob4)
    uncureprob5<-as.factor(uncureprob5)
    update_cureb<-c(1,1)
    update_pred<-c(1,1)
    
    dataa1=data.frame(uncureprob1,Z[,-1])
    mod1=neuralnet((uncureprob1==1)~z1+z2,data = dataa1, 
                   hidden=c(6,12),threshold = 0.05,linear.output=FALSE, act.fct = 'logistic')
    proba1=data.frame(probs1=neuralnet::compute(mod1,data)$net.result)
    cproba1=data.frame(prob1=neuralnet::compute(mod1,testdata)$net.result)
    
    update_cureb1<-c(1,1)
    update_pred1<-c(1,1)
    for (z in 1:n){update_cureb1[z]<-as.vector(proba1[z,colnames(proba1)=='probs1'])}
    for (k in 1:m){update_pred1[k]<-as.vector(cproba1[k,colnames(cproba1)=='prob1'])}
    
    uncureprob1<-as.numeric(as.character(uncureprob1))
    
    dataa2=data.frame(uncureprob2,Z[,-1])
    mod2=neuralnet((uncureprob2==1)~z1+z2,data = dataa2, 
                   hidden=c(6,12),threshold = 0.05,linear.output=FALSE, act.fct = 'logistic')
    proba2=data.frame(probs2=neuralnet::compute(mod2,data)$net.result)
    cproba2=data.frame(prob2=neuralnet::compute(mod2,testdata)$net.result)
    
    update_cureb2<-c(1,1)
    update_pred2<-c(1,1)
    for (z in 1:n){update_cureb2[z]<-as.vector(proba2[z,colnames(proba2)=='probs2'])}
    for (k in 1:m){update_pred2[k]<-as.vector(cproba2[k,colnames(cproba2)=='prob2'])}
    uncureprob2<-as.numeric(as.character(uncureprob2))
    
    dataa3=data.frame(uncureprob3,Z[,-1])
    mod3=neuralnet((uncureprob3==1)~z1+z2,data = dataa3, 
                   hidden=c(6,12),threshold = 0.05,linear.output=FALSE, act.fct = 'logistic')
    proba3=data.frame(probs3=neuralnet::compute(mod3,data)$net.result)
    cproba3=data.frame(prob3=neuralnet::compute(mod3,testdata)$net.result)
    
    update_cureb3<-c(1,1)
    update_pred3<-c(1,1)
    for (z in 1:n){update_cureb3[z]<-as.vector(proba3[z,colnames(proba3)=='probs3'])}
    for (k in 1:m){update_pred3[k]<-as.vector(cproba3[k,colnames(cproba3)=='prob3'])}
    uncureprob3<-as.numeric(as.character(uncureprob3))
    
    dataa4=data.frame(uncureprob4,Z[,-1])
    mod4=neuralnet((uncureprob4==1)~z1+z2,data = dataa4, 
                   hidden=c(6,12),threshold = 0.05,linear.output=FALSE, act.fct = 'logistic')
    proba4=data.frame(probs4=neuralnet::compute(mod4,data)$net.result)
    cproba4=data.frame(prob4=neuralnet::compute(mod4,testdata)$net.result)
    
    update_cureb4<-c(1,1)
    update_pred4<-c(1,1)
    for (z in 1:n){update_cureb4[z]<-as.vector(proba4[z,colnames(proba4)=='probs4'])}
    for (k in 1:m){update_pred4[k]<-as.vector(cproba4[k,colnames(cproba4)=='prob4'])}
    uncureprob4<-as.numeric(as.character(uncureprob4))
    
    dataa5=data.frame(uncureprob5,Z[,-1])
    mod5=neuralnet((uncureprob5==1)~z1+z2,data = dataa5, 
                   hidden=c(6,12),threshold = 0.05,linear.output=FALSE, act.fct = 'logistic')
    proba5=data.frame(probs5=neuralnet::compute(mod5,data)$net.result)
    cproba5=data.frame(prob5=neuralnet::compute(mod5,testdata)$net.result)
    
    update_cureb5<-c(1,1)
    update_pred5<-c(1,1)
    for (z in 1:n){update_cureb5[z]<-as.vector(proba5[z,colnames(proba5)=='probs5'])}
    for (k in 1:m){update_pred5[k]<-as.vector(cproba5[k,colnames(cproba5)=='prob5'])}
    uncureprob5<-as.numeric(as.character(uncureprob5))
    
    for (z in 1:n){update_cureb[z]<-(update_cureb1[z]+update_cureb2[z]+update_cureb3[z]+update_cureb4[z]+update_cureb5[z])/5}
    for (k in 1:m){update_pred[k]<-(update_pred1[k]+update_pred2[k]+update_pred3[k]+update_pred4[k]+update_pred5[k])/5}
    
    if(!is.null(offsetvar)) 
      update_cureb <- as.numeric(eval(parse(text = paste("glm", "(", "w~Z[,-1]+offset(offsetvar)",",family = quasibinomial(link='", link, "'",")",")",sep = "")))$coef)
   
      update_beta <- coxph(Surv(Time, Status)~X[,-1]+offset(log(w)),subset=w!=0, method="breslow")$coef
      if(!is.null(offsetvar)) 
        update_beta <- coxph(Surv(Time, Status)~X[,-1]+offset(offsetvar+log(w)), subset=w!=0, method="breslow")$coef
      update_s <-smsurv(Time,Status,X,beta,w,model="ph")$survival
    update_s1 <-smsurv(Time1,Status1,X1,beta,w1,model="ph")$survival
 
    convergence<-sum(c(mean(update_cureb)-mean(uncureprob),update_beta-beta)^2)
    uncureprob <- update_cureb
    uncurepred <- update_pred
    beta <- update_beta 
    s<-update_s
    s1<-update_s1
    i <- i+1
  }
    S1 = drop(s^(exp((beta)%*%t(X[,-1]))))
    S1.pred<-drop(s1^(exp((beta)%*%t(X1[,-1])))) # survival function of susceptible group 
  
  Sp = (1-uncureprob)+(uncureprob*S1)
  em.nn <- list(latencyfit=beta,Uncureprob=uncureprob,Uncurepred=uncurepred,S0=s,S1=S1,S1.pred=S1.pred,Sp=Sp,tau=convergence, Mod1=mod1, Mod2=mod2, Mod3=mod3, Mod4=mod4, Mod5=mod5)
}


## XGBoost

library(xgboost)

em.xgb <-function(Time,Time1,Status,Status1,X,X1,Z,Z1,offsetvar,uncureprob,uncurepred,beta,model,emmax,eps,data,testdata) # considering proportional hazards structure
{     
  w <- Status	
  w1<-Status1
  n <- length(Status)
  m <- length(Status1)
 
  s <- smsurv(Time,Status,X,beta,w,model)$survival
  
  convergence<- 1000;i <-1
  while (convergence > eps & i < emmax){ 
      survival<-drop(s^(exp((beta)%*%t(X[,-1]))))
    
    ## E step 
    w <- Status+(1-Status)*(uncureprob*survival)/((1-uncureprob)+uncureprob*survival)
    ## M step
    multipleuncureprob=matrix(1:5*n, nrow=n,ncol=5)
    for (j in 1:n){multipleuncureprob[j,]<-rbinom(5,size = 1,prob=w[j])}
    uncureprob1<-c(1,1)
    uncureprob2<-c(1,1)
    uncureprob3<-c(1,1)
    uncureprob4<-c(1,1)
    uncureprob5<-c(1,1)
    for (j in 1:n){uncureprob1[j]=multipleuncureprob[j,1]}
    for (j in 1:n){uncureprob2[j]=multipleuncureprob[j,2]}
    for (j in 1:n){uncureprob3[j]=multipleuncureprob[j,3]}
    for (j in 1:n){uncureprob4[j]=multipleuncureprob[j,4]}
    for (j in 1:n){uncureprob5[j]=multipleuncureprob[j,5]}
    for (j in 1:n){uncureprob1[j]=uncureprob1[j]}
    for (j in 1:n){uncureprob2[j]=uncureprob2[j]}
    for (j in 1:n){uncureprob3[j]=uncureprob3[j]}
    for (j in 1:n){uncureprob4[j]=uncureprob4[j]}
    for (j in 1:n){uncureprob5[j]=uncureprob5[j]}
    uncureprob1<-as.factor(uncureprob1)
    uncureprob2<-as.factor(uncureprob2)
    uncureprob3<-as.factor(uncureprob3)
    uncureprob4<-as.factor(uncureprob4)
    uncureprob5<-as.factor(uncureprob5)
    update_cureb<-c(1,1)
    update_pred<-c(1,1)
    #param <- list(max_depth = 2, nthread = 2, eval_metric = "auc")
    
    dtrain1 <- xgb.DMatrix(data = as.matrix(Z[,-1]), label=as.matrix(uncureprob1))
    mod1 <- xgb.train(data=dtrain1, nrounds=500,params = list(eta=0.001), objective = "binary:logistic")
    proba1 <- data.frame(probs1= predict(mod1, newdata = as.matrix(Z[,-1])))
    cproba1 <- data.frame(probs1= predict(mod1, newdata = as.matrix(Z1[,-1])))
    
    update_cureb1<-c(1,1)
    update_pred1<-c(1,1)
    for (z in 1:n){update_cureb1[z]<-proba1[z,colnames(proba1)=='probs1']}
    for (d in 1:m){update_pred1[d]<-cproba1[d,colnames(cproba1)=='probs1']}
    
    uncureprob1<-as.numeric(as.character(uncureprob1))
    
    dtrain2 <- xgb.DMatrix(data = as.matrix(Z[,-1]), label=as.matrix(uncureprob2))
    mod2 <- xgb.train(data=dtrain2, nrounds=500,params = list(eta=0.001), objective = "binary:logistic")
    proba2 <- data.frame(probs2= predict(mod2, newdata = as.matrix(Z[,-1])))
    cproba2 <- data.frame(probs2= predict(mod2, newdata = as.matrix(Z1[,-1])))
    
    update_cureb2<-c(1,1)
    update_pred2<-c(1,1)
    for (z in 1:n){update_cureb2[z]<-proba2[z,colnames(proba2)=='probs2']}
    for (d in 1:m){update_pred2[d]<-cproba2[d,colnames(cproba2)=='probs2']}    
    uncureprob2<-as.numeric(as.character(uncureprob2))
    
    dtrain3 <- xgb.DMatrix(data = as.matrix(Z[,-1]), label=as.matrix(uncureprob3))
    mod3 <- xgb.train(data=dtrain3, nrounds=500,params = list(eta=0.001), objective = "binary:logistic")
    proba3 <- data.frame(probs3= predict(mod3, newdata = as.matrix(Z[,-1])))
    cproba3 <- data.frame(probs3= predict(mod3, newdata = as.matrix(Z1[,-1])))
    
    update_cureb3<-c(1,1)
    update_pred3<-c(1,1)
    for (z in 1:n){update_cureb3[z]<-proba3[z,colnames(proba3)=='probs3']}
    for (d in 1:m){update_pred3[d]<-cproba3[d,colnames(cproba3)=='probs3']}
    uncureprob3<-as.numeric(as.character(uncureprob3))
    
    dtrain4 <- xgb.DMatrix(data = as.matrix(Z[,-1]), label=as.matrix(uncureprob4))
    mod4 <- xgb.train(data=dtrain4, nrounds=500,params = list(eta=0.001), objective = "binary:logistic")
    proba4 <- data.frame(probs4= predict(mod4, newdata = as.matrix(Z[,-1])))
    cproba4 <- data.frame(probs4= predict(mod4, newdata = as.matrix(Z1[,-1])))
    
    update_cureb4<-c(1,1)
    update_pred4<-c(1,1)
    for (z in 1:n){update_cureb4[z]<-proba4[z,colnames(proba4)=='probs4']}
    for (d in 1:m){update_pred4[d]<-cproba4[d,colnames(cproba4)=='probs4']}    
    uncureprob4<-as.numeric(as.character(uncureprob4))
    
    dtrain5 <- xgb.DMatrix(data = as.matrix(Z[,-1]), label=as.matrix(uncureprob5))
    mod5 <- xgb.train(data=dtrain5, nrounds=500,params = list(eta=0.001), objective = "binary:logistic")
    proba5 <- data.frame(probs5= predict(mod5, newdata = as.matrix(Z[,-1])))
    cproba5 <- data.frame(probs5= predict(mod5, newdata = as.matrix(Z1[,-1])))
    
    update_cureb5<-c(1,1)
    update_pred5<-c(1,1)
    for (z in 1:n){update_cureb5[z]<-proba5[z,colnames(proba5)=='probs5']}
    for (d in 1:m){update_pred5[d]<-cproba5[d,colnames(cproba5)=='probs5']}    
    uncureprob5<-as.numeric(as.character(uncureprob5))
    
    for (z in 1:n){update_cureb[z]<-(update_cureb1[z]+update_cureb2[z]+update_cureb3[z]+update_cureb4[z]+update_cureb5[z])/5}
    for (d in 1:m){update_pred[d]<-(update_pred1[d]+update_pred2[d]+update_pred3[d]+update_pred4[d]+update_pred5[d])/5}
    
    if(!is.null(offsetvar)) 
      update_cureb <- as.numeric(eval(parse(text = paste("glm", "(", "w~Z[,-1]+offset(offsetvar)",",family = quasibinomial(link='", link, "'",")",")",sep = "")))$coef)
   
      update_beta <- coxph(Surv(Time, Status)~X[,-1]+offset(log(w)),subset=w!=0, method="breslow")$coef
      if(!is.null(offsetvar)) 
        update_beta <- coxph(Surv(Time, Status)~X[,-1]+offset(offsetvar+log(w)), subset=w!=0, method="breslow")$coef
      update_s <-smsurv(Time,Status,X,beta,w,model="ph")$survival
      update_s1 <-smsurv(Time1,Status1,X1,beta,w1,model="ph")$survival
    
    convergence<-sum(c(mean(update_cureb)-mean(uncureprob),update_beta-beta)^2)
    uncureprob <- update_cureb
    uncurepred <- update_pred
    beta <- update_beta 
    s<-update_s
    s1<-update_s1
    i <- i+1
  }

    S1 = drop(s^(exp((beta)%*%t(X[,-1]))))
    S1.pred<-drop(s1^(exp((beta)%*%t(X1[,-1])))) # survival function of susceptible group 
  
  Sp = (1-uncureprob)+(uncureprob*S1)
  em.xgb <- list(latencyfit=beta,Uncureprob=uncureprob,Uncurepred=uncurepred,S0=s,S1=S1,S1.pred=S1.pred,Sp=Sp,tau=convergence, Mod1=mod1, Mod2=mod2, Mod3=mod3, Mod4=mod4, Mod5=mod5)
}


## Decision Trees

library(rpart)

em.dt <-function(Time,Time1,Status,Status1,X,X1,Z,Z1,offsetvar,uncureprob,uncurepred,beta,emmax,eps,data,testdata) # considering proportional hazards structure
{     
  w <- Status	
  w1<-Status1
  n <- length(Status)
  m <- dim(testdata)[1]
  s <- smsurv(Time,Status,X,beta,w,model="ph")$survival
  convergence<- 1000;i <-1
  while (convergence > eps & i < emmax){ 
    
    survival<-drop(s^(exp((beta)%*%t(X[,-1]))))
    ## E step 
    w <- Status+(1-Status)*(uncureprob*survival)/((1-uncureprob)+uncureprob*survival)
    ## M step
    multipleuncureprob=matrix(1:5*n, nrow=n,ncol=5)
    for (j in 1:n){multipleuncureprob[j,]<-rbinom(5,size = 1,prob=w[j])}
    uncureprob1<-c(1,1)
    uncureprob2<-c(1,1)
    uncureprob3<-c(1,1)
    uncureprob4<-c(1,1)
    uncureprob5<-c(1,1)
    for (j in 1:n){uncureprob1[j]=multipleuncureprob[j,1]}
    for (j in 1:n){uncureprob2[j]=multipleuncureprob[j,2]}
    for (j in 1:n){uncureprob3[j]=multipleuncureprob[j,3]}
    for (j in 1:n){uncureprob4[j]=multipleuncureprob[j,4]}
    for (j in 1:n){uncureprob5[j]=multipleuncureprob[j,5]}
    for (j in 1:n){uncureprob1[j]=uncureprob1[j]}
    for (j in 1:n){uncureprob2[j]=uncureprob2[j]}
    for (j in 1:n){uncureprob3[j]=uncureprob3[j]}
    for (j in 1:n){uncureprob4[j]=uncureprob4[j]}
    for (j in 1:n){uncureprob5[j]=uncureprob5[j]}
    uncureprob1<-as.factor(uncureprob1)
    uncureprob2<-as.factor(uncureprob2)
    uncureprob3<-as.factor(uncureprob3)
    uncureprob4<-as.factor(uncureprob4)
    uncureprob5<-as.factor(uncureprob5)
    update_cureb<-c(1,1)
    update_pred<-c(1,1)
    
    daata=data.frame(uncureprob1,Z[,-1])
    obj3 <- tune.rpart(uncureprob1~z1+z2, data = daata, minsplit =c(11,20,25), cp = c(0.0001,0.005,0.01))
    bc<-obj3$best.parameters[1]  
    bg<-obj3$best.parameters[2]
    
    
    mod1 <- rpart(formula = uncureprob1~z1+z2, data = data,method = "class",control = rpart.control(minsplit = bc[[1]],minbucket = round(bc[[1]]/3), cp = bg[[1]]),xval = 10,parms = list(split="gini"))
    cp.min1<-mod1$cptable[which.min(mod1$cptable[,"xerror"]),"CP"]
    tree1<-prune(mod1, cp=cp.min1)
    proba1 <- predict(tree1, newdata = data,type = "prob")
    cproba1 <- predict(tree1, newdata = testdata,type = "prob")
    update_cureb1<-c(1,1)
    update_pred1<-c(1,1)
    for (z in 1:n){update_cureb1[z]<-proba1[z,colnames(proba1)==1]}
    for (d in 1:m){update_pred1[d]<-cproba1[d,colnames(cproba1)==1]}
    uncureprob1<-as.numeric(as.character(uncureprob1))
    
    mod2 <- rpart(formula = uncureprob2~z1+z2, data = data,method = "class",control = rpart.control(minsplit = bc[[1]],minbucket = round(bc[[1]]/3), cp = bg[[1]]),xval = 10,parms = list(split="gini"))
    cp.min2<-mod2$cptable[which.min(mod2$cptable[,"xerror"]),"CP"]
    tree2<-prune(mod2, cp=cp.min2)
    proba2 <- predict(tree2, newdata = data,type = "prob")
    cproba2 <- predict(tree2, newdata = testdata,type = "prob")
    update_cureb2<-c(1,1)
    update_pred2<-c(1,1)
    for (z in 1:n){update_cureb2[z]<-proba2[z,colnames(proba2)==1]}
    for (d in 1:m){update_pred2[d]<-cproba2[d,colnames(cproba2)==1]}
    uncureprob2<-as.numeric(as.character(uncureprob2))
    
    mod3 <- rpart(formula = uncureprob3~z1+z2, data = data,method = "class",control = rpart.control(minsplit = bc[[1]],minbucket = round(bc[[1]]/3), cp = bg[[1]]),xval = 10,parms = list(split="gini"))
    cp.min3<-mod3$cptable[which.min(mod3$cptable[,"xerror"]),"CP"]
    tree3<-prune(mod3, cp=cp.min3)
    proba3 <- predict(tree3, newdata = data,type = "prob")
    cproba3 <- predict(tree3, newdata = testdata,type = "prob")
    update_cureb3<-c(1,1)
    update_pred3<-c(1,1)
    for (z in 1:n){update_cureb3[z]<-proba3[z,colnames(proba3)==1]}
    for (d in 1:m){update_pred3[d]<-cproba3[d,colnames(cproba3)==1]}
    uncureprob3<-as.numeric(as.character(uncureprob3))
    
    mod4 <- rpart(formula = uncureprob4~z1+z2, data = data,method = "class",control = rpart.control(minsplit = bc[[1]],minbucket = round(bc[[1]]/3), cp = bg[[1]]),xval = 10,parms = list(split="gini"))
    cp.min4<-mod4$cptable[which.min(mod4$cptable[,"xerror"]),"CP"]
    tree4<-prune(mod4, cp=cp.min4)
    proba4 <- predict(tree4, newdata = data,type = "prob")
    cproba4 <- predict(tree4, newdata = testdata,type = "prob")
    update_cureb4<-c(1,1)
    update_pred4<-c(1,1)
    for (z in 1:n){update_cureb4[z]<-proba4[z,colnames(proba4)==1]}
    for (d in 1:m){update_pred4[d]<-cproba4[d,colnames(cproba4)==1]}
    uncureprob4<-as.numeric(as.character(uncureprob4))
    
    mod5 <- rpart(formula = uncureprob5~z1+z2, data = data,method = "class",control = rpart.control(minsplit = bc[[1]],minbucket = round(bc[[1]]/3), cp = bg[[1]]),xval = 10,parms = list(split="gini"))
    cp.min5<-mod5$cptable[which.min(mod5$cptable[,"xerror"]),"CP"]
    tree5<-prune(mod5, cp=cp.min5)
    proba5 <- predict(tree5, newdata = data,type = "prob")
    cproba5 <- predict(tree5, newdata = testdata,type = "prob")
    update_cureb5<-c(1,1)
    update_pred5<-c(1,1)
    for (z in 1:n){update_cureb5[z]<-proba5[z,colnames(proba5)==1]}
    for (d in 1:m){update_pred5[d]<-cproba5[d,colnames(cproba5)==1]}
    uncureprob5<-as.numeric(as.character(uncureprob5))
    
    for (z in 1:n){update_cureb[z]<-(update_cureb1[z]+update_cureb2[z]+update_cureb3[z]+update_cureb4[z]+update_cureb5[z])/5}
    for (d in 1:m){update_pred[d]<-(update_pred1[d]+update_pred2[d]+update_pred3[d]+update_pred4[d]+update_pred5[d])/5}
    
    update_beta <- coxph(Surv(Time, Status)~X[,-1]+offset(log(w)),subset=w!=0, method="breslow")$coef
    update_s <-smsurv(Time,Status,X,beta,w,model="ph")$survival
    update_s1 <-smsurv(Time1,Status1,X1,beta,w1,model="ph")$survival
   
    convergence<-sum(c(mean(update_cureb)-mean(uncureprob),update_beta-beta,mean(update_s)-mean(s))^2)
    uncureprob <- update_cureb
    uncurepred <- update_pred
    beta <- update_beta 
    s<-update_s
    s1<-update_s1
    i <- i+1
  }
  S1 = drop(s^(exp((beta)%*%t(X[,-1])))) # survival function of susceptible group
  S1.pred<-drop(s1^(exp((beta)%*%t(X1[,-1]))))
  Sp = (1-uncureprob)+(uncureprob*S1)
  em.dt <- list(latencyfit=beta,Uncureprob=uncureprob,Uncurepred=uncurepred,S0=s,S1=S1,Sp=Sp,S1.pred=S1.pred,tau=convergence, Mod1=mod1, Mod2=mod2, Mod3=mod3, Mod4=mod4, Mod5=mod5)
}


## Random Forest

library(randomForest)

em.rf <-function(Time,Time1,Status,Status1,X,X1,Z,Z1,offsetvar,uncureprob,uncurepred,beta,model,emmax,eps,data,testdata) # considering proportional hazards structure
{     
  w <- Status	
  w1<-Status1
  n <- length(Status)
  m <- length(Status1)
  
  s <- smsurv(Time,Status,X,beta,w,model="ph")$survival
  
  convergence<- 1000;i <-1
  while (convergence > eps & i < emmax){ 
  
      survival<-drop(s^(exp((beta)%*%t(X[,-1]))))
    
    ## E step 
    w <- Status+(1-Status)*(uncureprob*survival)/((1-uncureprob)+uncureprob*survival)
    wc = rep(NA,n)
    for(k in 1:n){
      if(w[k] > 0){
        wc[k] = w[k]
      }else{
        wc[k] = 0
      }
    }
   
    ## M step
    multipleuncureprob=matrix(1:5*n, nrow=n,ncol=5)
    for (j in 1:n){multipleuncureprob[j,]<-rbinom(5,size = 1,prob=wc[j])}
    uncureprob1<-c(1,1)
    uncureprob2<-c(1,1)
    uncureprob3<-c(1,1)
    uncureprob4<-c(1,1)
    uncureprob5<-c(1,1)
    for (j in 1:n){uncureprob1[j]=multipleuncureprob[j,1]}
    for (j in 1:n){uncureprob2[j]=multipleuncureprob[j,2]}
    for (j in 1:n){uncureprob3[j]=multipleuncureprob[j,3]}
    for (j in 1:n){uncureprob4[j]=multipleuncureprob[j,4]}
    for (j in 1:n){uncureprob5[j]=multipleuncureprob[j,5]}
    for (j in 1:n){uncureprob1[j]=uncureprob1[j]}
    for (j in 1:n){uncureprob2[j]=uncureprob2[j]}
    for (j in 1:n){uncureprob3[j]=uncureprob3[j]}
    for (j in 1:n){uncureprob4[j]=uncureprob4[j]}
    for (j in 1:n){uncureprob5[j]=uncureprob5[j]}
    uncureprob1<-as.factor(uncureprob1)
    uncureprob2<-as.factor(uncureprob2)
    uncureprob3<-as.factor(uncureprob3)
    uncureprob4<-as.factor(uncureprob4)
    uncureprob5<-as.factor(uncureprob5)
    update_cureb<-c(1,1)
    update_pred<-c(1,1)
    
    mod1=randomForest(x=Z[,-1],y=uncureprob1,ntree =500,mtry = 2,replace=TRUE)
    proba1 <- predict(mod1,newdata = Z[,-1],type = "prob")
    cproba1 <- predict(mod1,newdata = Z1[,-1],type = "prob")
    
    update_cureb1<-c(1,1)
    update_pred1<-c(1,1)
    for (z in 1:n){update_cureb1[z]<-proba1[z,colnames(proba1)==1]}
    for (d in 1:m){update_pred1[d]<-cproba1[d,colnames(cproba1)==1]}
    uncureprob1<-as.numeric(as.character(uncureprob1))
    
    mod2=randomForest(x=Z[,-1],y=uncureprob2,ntree =500,mtry = 2,replace=TRUE)
    proba2 <- predict(mod2,newdata = Z[,-1],type = "prob")
    cproba2 <- predict(mod2,newdata = Z1[,-1],type = "prob")
    
    update_cureb2<-c(1,1)
    update_pred2<-c(1,1)
    for (z in 1:n){update_cureb2[z]<-proba2[z,colnames(proba2)==1]}
    for (d in 1:m){update_pred2[d]<-cproba2[d,colnames(cproba2)==1]}
    uncureprob2<-as.numeric(as.character(uncureprob2))
    
    
    mod3=randomForest(x=Z[,-1],y=uncureprob3,ntree =500,mtry = 2,replace=TRUE)
    proba3 <- predict(mod3,newdata = Z[,-1],type = "prob")
    cproba3 <- predict(mod3,newdata = Z1[,-1],type = "prob")

    update_cureb3<-c(1,1)
    update_pred3<-c(1,1)
    for (z in 1:n){update_cureb3[z]<-proba3[z,colnames(proba3)==1]}
    for (d in 1:m){update_pred3[d]<-cproba3[d,colnames(cproba3)==1]}
    uncureprob3<-as.numeric(as.character(uncureprob3))
    

    mod4=randomForest(x=Z[,-1],y=uncureprob4,ntree =500,mtry = 2,replace=TRUE)
    proba4 <- predict(mod4,newdata = Z[,-1],type = "prob")
    cproba4 <- predict(mod4,newdata = Z1[,-1],type = "prob")

    update_cureb4<-c(1,1)
    update_pred4<-c(1,1)
    for (z in 1:n){update_cureb4[z]<-proba4[z,colnames(proba4)==1]}
    for (d in 1:m){update_pred4[d]<-cproba4[d,colnames(cproba4)==1]}
    uncureprob4<-as.numeric(as.character(uncureprob4))
    
    mod5=randomForest(x=Z[,-1],y=uncureprob5,ntree =500,mtry = 2,replace=TRUE)
    proba5 <- predict(mod5,newdata = Z[,-1],type = "prob")
    cproba5 <- predict(mod5,newdata = Z1[,-1],type = "prob")
    
    update_cureb5<-c(1,1)
    update_pred5<-c(1,1)
    for (z in 1:n){update_cureb5[z]<-proba5[z,colnames(proba5)==1]}
    for (d in 1:m){update_pred5[d]<-cproba5[d,colnames(cproba5)==1]}
    uncureprob5<-as.numeric(as.character(uncureprob5))
    
    for (z in 1:n){update_cureb[z]<-(update_cureb1[z]+update_cureb2[z]+update_cureb3[z]+update_cureb4[z]+update_cureb5[z])/5}
    for (d in 1:m){update_pred[d]<-(update_pred1[d]+update_pred2[d]+update_pred3[d]+update_pred4[d]+update_pred5[d])/5}
    
    if(!is.null(offsetvar)) 
      update_cureb <- as.numeric(eval(parse(text = paste("glm", "(", "w~Z[,-1]+offset(offsetvar)",",family = quasibinomial(link='", link, "'",")",")",sep = "")))$coef)
    
      update_beta <- coxph(Surv(Time, Status)~X[,-1]+offset(log(w)),subset=w!=0, method="breslow")$coef
      if(!is.null(offsetvar)) 
        update_beta <- coxph(Surv(Time, Status)~X[,-1]+offset(offsetvar+log(w)), subset=w!=0, method="breslow")$coef
        update_s <-smsurv(Time,Status,X,beta,w,model="ph")$survival
        update_s1 <-smsurv(Time1,Status1,X1,beta,w1,model="ph")$survival  
    
      convergence<-sum(c(mean(update_cureb)-mean(uncureprob),update_beta-beta)^2)

    uncureprob <- update_cureb
    uncurepred <- update_pred
    beta <- update_beta 
    s<-update_s
    s1<-update_s1
    i <- i+1
  }

    S1 = drop(s^(exp((beta)%*%t(X[,-1]))))
    S1.pred<-drop(s1^(exp((beta)%*%t(X1[,-1])))) # survival function of susceptible group 

  Sp = (1-uncureprob)+(uncureprob*S1)
  em.rf <- list(latencyfit=beta,Uncureprob=uncureprob,Uncurepred=uncurepred,S0=s,S1=S1,S1.pred=S1.pred,Sp=Sp,tau=convergence, Mod1=mod1, Mod2=mod2, Mod3=mod3, Mod4=mod4, Mod5=mod5)
}




